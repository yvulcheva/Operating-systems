--Документация на домашно номер 2 за курс Операционни системи
--Изготвила Йолина Вълчева, Софтуерно инженерство

	Домашно номер 2 се състои от една задача, която представлява - получаване на реални безкрайни данни,
	в зададен в условието формат, от постановка на включен тостер, които се обработват и извеждат на stderr и	
	stdout(в зависимост от ситуацията). В условието е указано, че за реализирането на задачата е
	нужно програмата да може да работи с 2 аргумента - команда (record или replay) и файл за 
	четене(при replay) или писане(при record). 

	Според изискванията на условието програмата ми има следните функции:
	- при извикване на програмата чрез curl -Ns https://rnd.qtrp.org/toaster | ./main record <име_на_файл_за_писане> ,
	първо се стартира времето за начало на програмата и се проверяват броя на аргументите. Ако той не отговаря, 
	се извежда съобщение за грешка. След проверка, програмата отваря файл според името указано от потребителя и в случай,
	че файлът не съществува, се създава нов файл за писане с права: четене и писане от потребител, четене от групата и
	четене от други, а в случай, че файлът съществува, се изтрива информацията в него и се използва от програмата. 
	При неуспешно отваряне на файла се извежда съобщение за грешка. В случай, че е отворен успешно започват да се четат от stdin
	първо 2 байта отговарящи за вида съобщение, след което се взема и се изчислява времето за получаване на едно съобщение.
	Времето се записва във файла подаден като аргумент, след което се записва и вида на съобщението. В случай че съобщението отговаря
	на 0x0001, се прочитат и се записват по 2 байта за слотове и 4 байта за температура. При грешка в четенето или писането се извежда
	съобщение за грешка. А в случай че съобщението отговаря на 0x0002, се записват по 1 байт за число отговарящо на някой от слотовете
	и 13 байта за текст описващ информацията за слота. Отново в случай на грешка при четене или писане се извежда съобщение за грешка.
	Използват се две помощни функции (void state(float time, uint16_t slots, uint32_t temperature) и 
	void slot_text(float time, uint8_t identif, char text[])(*)) за форматиране и извеждане на данните върху stderr,според формата 
	от условието.
	

	- при извикване на програмата чрез ./main replay <име_на_файл_за_четене>. Като се изисква при избора на файл, той да бъде
	предварително генериран, чрез командата record, за да отговаря на формата, който се изисква от условието на задачата и съответно
	от програмата. В случай, че формата не отговаря, се извежда съобщение за грешка.
	При стартирането на програмата се отваря съответния файл, при успешно отваряне се чете първо времето, записано във файла. След което,
	се изчислява времето за чакане на системата, за да се изведат данните върху stdout и stderr. Времето се изчислява така: взема се първо
	променлива равна на нула (prevTime) и променливата time равна на моментното прочетено време от файла. След което, променливата 
	prevTime става равна на моментното време, а time взема следващата стойност на времето. И при изваждане на prevTime от time, се
	получава нужната разлика за време, което трябва да се изчака от системата. Времето се извежда на stdout, а след това се прочитат 
	от файла 2 байта за съобщението (извежда се на stdout) и според неговия вид се прочитат и извеждат(на sdtout) съответните стойности
	за state: 2 байта за слотовете и по 4 байта за температура, а за slot_text: 1 байт за номера на слота и 13 байта за текста към слота.
	Отново се използват двете помощни функции (*) за форматирането и извеждането на данните върху stderr.

--Легенда за изведените грешки:
	-при неправилен брой аргументи: 1
	-при неуспешно отваряне на файл: 2
	-при неуспешно писане на данни във файл: 3
	-при неуспешно четене на данни stdin: 4
	-при неуспешно четене на данни от файл: 5
	-при неуспешно писане на данни на stdout: 6
	-при грешен формат на данните от файла: 7
	-при грешен формат на данните от stdin: 8
	-при не използавне на команда replay или record: 9

--Използвани допълнителни библиотеки:
	#include <stdio.h>
	#include <err.h>
	#include <string.h>
	#include <sys/types.h>
	#include <sys/stat.h>
	#include <fcntl.h>
	#include <stdint.h>
	#include <time.h>
	#include <unistd.h> 
